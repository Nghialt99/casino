{"version":3,"sources":["reducers/reducers.js","actions/actions.js","kucasino/footer.js","kucasino/header.js","kucasino/widget.js","kucasino/body.js","serviceWorker.js","index.js"],"names":["todo","state","action","type","id","text","todoApp","combineReducers","todos","undefined","Footer","className","Component","Header","Widget","Body","Boolean","window","location","hostname","match","store","createStore","rootElement","document","getElementById","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAGA,SAASA,EAAKC,EAAOC,GAClB,OAAQA,EAAOC,MACZ,ICLkB,WDMf,MAAO,CACJC,GAAIF,EAAOE,GACXC,KAAMH,EAAOG,MAEnB,QACG,OAAOJ,GAchB,IAGeK,EAHCC,YAAgB,CAC7BC,MAZH,WAAoC,IAArBP,EAAoB,uDAAZ,GAAIC,EAAQ,uCAChC,OAAQA,EAAOC,MACZ,IChBkB,WDiBf,MAAM,GAAN,mBACMF,GADN,CAEGD,OAAKS,EAAWP,KAEtB,QACG,OAAOD,M,mCEZDS,E,iLANP,OACI,yBAAKC,UAAU,UAAf,c,GAHSC,aCoBNC,G,uLAhBP,OACI,4BAAQF,UAAU,UACd,yBAAKA,UAAU,aACX,wBAAIA,UAAU,kBAAd,wBACA,yBAAKA,UAAU,YACX,uBAAGA,UAAU,oBAAb,wBACA,uBAAGA,UAAU,iBAAb,8BAGR,yBAAKA,UAAU,mB,GAXVC,cCMNE,E,iLANP,OACI,yBAAKH,UAAU,UAAf,c,GAHSC,aCYNG,E,iLATP,OACI,yBAAKJ,UAAU,QACX,kBAAC,EAAD,W,GAJGC,a,MCSCI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCNN,IAAIC,EAAQC,YAAYhB,GACpBiB,EAAcC,SAASC,eAAe,QAE1CC,iBACI,kBAAC,IAAD,CAAUL,MAAOA,GACT,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,OAERE,GD8GE,kBAAmBI,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5121b49d.chunk.js","sourcesContent":["import { combineReducers } from 'redux'\r\nimport { ADD_TODO } from '../actions/actions'\r\n\r\nfunction todo(state, action) {\r\n   switch (action.type) {\r\n      case ADD_TODO:\r\n         return {\r\n            id: action.id,\r\n            text: action.text,\r\n         }\r\n      default:\r\n         return state\r\n   }\r\n}\r\nfunction todos(state = [], action) {\r\n   switch (action.type) {\r\n      case ADD_TODO:\r\n         return [\r\n            ...state,\r\n            todo(undefined, action)\r\n         ]\r\n      default:\r\n         return state\r\n   }\r\n}\r\nconst todoApp = combineReducers({\r\n   todos\r\n})\r\nexport default todoApp","export const ADD_TODO = 'ADD_TODO'\r\n\r\nlet nextTodoId = 0;\r\n\r\nexport function addTodo(text) {\r\n   return {\r\n      type: ADD_TODO,\r\n      id: nextTodoId++,\r\n      text\r\n   };\r\n}","import React, { Component } from 'react';\r\n\r\nclass Footer extends Component {\r\n    render() {\r\n        return (\r\n            <div className='footer'>Footer</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Footer","import React, { Component } from 'react';\r\nimport { } from 'reactstrap';\r\nimport '../css/header.css';\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <header className=\"header\">\r\n                <div className=\"mb_header\">\r\n                    <h1 className=\"bg_header_name\">Sóc Đĩa</h1>\r\n                    <div className=\"header_R\">\r\n                        <a className=\"btn_homeRegister\">Đăng ký</a>\r\n                        <a className=\"btn_homeLogin\">Đăng nhập</a>\r\n                    </div>\r\n                </div>\r\n                <div className=\"dt_header\">\r\n                </div>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header","import React, { Component } from 'react';\r\n\r\nclass Widget extends Component {\r\n    render() {\r\n        return (\r\n            <div className='widget'>Widget</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Widget","import React, { Component } from 'react';\r\nimport Widget from './widget';\r\n\r\nclass Body extends Component {\r\n    render() {\r\n        return (\r\n            <div className='body'>\r\n                <Widget/>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Body","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport todoApp from './reducers/reducers';\nimport Footer from './kucasino/footer';\nimport Header from './kucasino/header';\nimport Body from './kucasino/body';\nimport './css/master.css';\nimport * as serviceWorker from './serviceWorker';\n\nlet store = createStore(todoApp)\nlet rootElement = document.getElementById('root')\n\nrender(\n    <Provider store={store}>\n            <Header />\n            <Body />\n            <Footer />\n    </Provider>,\n    rootElement\n)\n\nserviceWorker.unregister();\n"],"sourceRoot":""}